<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>XWiki</web>
<name>CRaSH</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>XWiki.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1342887318000</creationDate>
<date>1343291328000</date>
<contentUpdateDate>1343291328000</contentUpdateDate>
<version>31.1</version>
<title>CRaSH</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.CRaSH</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>aae7f713-5a0e-4efb-8c31-9f710ce7580e</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>// JQuery Console 1.0
// Sun Feb 21 20:28:47 GMT 2010
//
// Copyright 2010 Chris Done, Simon David Pratt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//    1. Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//    2. Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// TESTED ON
//   Internet Explorer 6
//   Opera 10.01
//   Chromium 4.0.237.0 (Ubuntu build 31094)
//   Firefox 3.5.8, 3.6.2 (Mac)
//   Safari 4.0.5 (6531.22.7) (Mac)
//   Google Chrome 5.0.375.55 (Mac)

(function($){
    $.fn.console = function(config){
        ////////////////////////////////////////////////////////////////////////
        // Constants
        // Some are enums, data types, others just for optimisation
        var keyCodes = {
	    // left
	    37: moveBackward,
	    // right
	    39: moveForward,
	    // up
	    38: previousHistory,
	    // down
	    40: nextHistory,
	    // backspace
	    8:  backDelete,
	    // delete
	    46: forwardDelete,
            // end
	    35: moveToEnd,
	    // start
	    36: moveToStart,
	    // return
	    13: commandTrigger,
	    // tab
	    18: doNothing,
        // tab
        9: doComplete
	};
	var ctrlCodes = {
	    // C-a
	    65: moveToStart,
	    // C-e
	    69: moveToEnd,
	    // C-d
	    68: forwardDelete,
	    // C-n
	    78: nextHistory,
	    // C-p
	    80: previousHistory,
	    // C-b
	    66: moveBackward,
	    // C-f
	    70: moveForward,
	    // C-k
	    75: deleteUntilEnd
	};
	var altCodes = {
	    // M-f
	    70: moveToNextWord,
	    // M-b
	    66: moveToPreviousWord,
	    // M-d
	    68: deleteNextWord
	};
        var cursor = '&lt;span class="jquery-console-cursor"&gt;&amp;nbsp;&lt;/span&gt;';

        ////////////////////////////////////////////////////////////////////////
        // Globals
        var container = $(this);
        var inner = $('&lt;div class="jquery-console-inner"&gt;&lt;/div&gt;');
        // erjiang: changed this from a text input to a textarea so we
        // can get pasted newlines
        var typer = $('&lt;textarea class="jquery-console-typer"&gt;&lt;/textarea&gt;');
        // Prompt
        var promptBox;
        var prompt;
        var promptLabel = config &amp;&amp; config.promptLabel? config.promptLabel : "&gt; ";
        var continuedPromptLabel = config &amp;&amp; config.continuedPromptLabel?
        config.continuedPromptLabel : "&gt; ";
        var column = 0;
        var promptText = '';
        var restoreText = '';
        var continuedText = '';
        // Prompt history stack
        var history = [];
        var ringn = 0;
        // For reasons unknown to The Sword of Michael himself, Opera
        // triggers and sends a key character when you hit various
        // keys like PgUp, End, etc. So there is no way of knowing
        // when a user has typed '#' or End. My solution is in the
        // typer.keydown and typer.keypress functions; I use the
        // variable below to ignore the keypress event if the keydown
        // event succeeds.
        var cancelKeyPress = 0;
	// When this value is false, the prompt will not respond to input
	var acceptInput = true;
	// When this value is true, the command has been canceled
	var cancelCommand = false;

        // External exports object
        var extern = {};

        ////////////////////////////////////////////////////////////////////////
        // Main entry point
        (function(){
            container.append(inner);
            inner.append(typer);
            typer.css({position:'absolute',top:0,left:'-9999px'});
            if (config.welcomeMessage)
                message(config.welcomeMessage,'jquery-console-welcome');
            newPromptBox();
            if (config.autofocus) {
                inner.addClass('jquery-console-focus');
                typer.focus();
                setTimeout(function(){
                    inner.addClass('jquery-console-focus');
                    typer.focus();
                },100);
            }
            extern.inner = inner;
            extern.typer = typer;
            extern.scrollToBottom = scrollToBottom;
        })();

        ////////////////////////////////////////////////////////////////////////
        // Reset terminal
        extern.reset = function(){
            var welcome = (typeof config.welcomeMessage != 'undefined');
            inner.parent().fadeOut(function(){
                inner.find('div').each(function(){
                    if (!welcome) {
                        $(this).remove();
		    } else {
			welcome = false;
		    }
                });
                newPromptBox();
                inner.parent().fadeIn(function(){
                    inner.addClass('jquery-console-focus');
                    typer.focus();
                });
            });
        };

        ////////////////////////////////////////////////////////////////////////
        // Reset terminal
        extern.notice = function(msg,style){
            var n = $('&lt;div class="notice"&gt;&lt;/div&gt;').append($('&lt;div&gt;&lt;/div&gt;').text(msg))
                .css({visibility:'hidden'});
            container.append(n);
            var focused = true;
            if (style=='fadeout')
                setTimeout(function(){
                    n.fadeOut(function(){
                        n.remove();
                    });
                },4000);
            else if (style=='prompt') {
                var a = $('&lt;br/&gt;&lt;div class="action"&gt;&lt;a href="javascript:"&gt;OK&lt;/a&gt;&lt;div class="clear"&gt;&lt;/div&gt;&lt;/div&gt;');
                n.append(a);
                focused = false;
                a.click(function(){ n.fadeOut(function(){ n.remove();inner.css({opacity:1}) }); });
            }
            var h = n.height();
            n.css({height:'0px',visibility:'visible'})
                .animate({height:h+'px'},function(){
                    if (!focused) inner.css({opacity:0.5});
                });
            n.css('cursor','default');
            return n;
        };

        ////////////////////////////////////////////////////////////////////////
        // Make a new prompt box
        function newPromptBox() {
            column = 0;
            promptText = '';
	    ringn = 0; // Reset the position of the history ring
	    enableInput();
            promptBox = $('&lt;div class="jquery-console-prompt-box"&gt;&lt;/div&gt;');
            var label = $('&lt;span class="jquery-console-prompt-label"&gt;&lt;/span&gt;');
            var labelText = extern.continuedPrompt? continuedPromptLabel : promptLabel;
            promptBox.append(label.text(labelText).show());
            label.html(label.html().replace(' ','&amp;nbsp;'));
            prompt = $('&lt;span class="jquery-console-prompt"&gt;&lt;/span&gt;');
            promptBox.append(prompt);
            inner.append(promptBox);
            updatePromptDisplay();
        };

        ////////////////////////////////////////////////////////////////////////
        // Handle setting focus
        container.click(function(){
            inner.addClass('jquery-console-focus');
            inner.removeClass('jquery-console-nofocus');
            typer.focus();
            scrollToBottom();
            return false;
        });

        ////////////////////////////////////////////////////////////////////////
        // Handle losing focus
        typer.blur(function(){
            inner.removeClass('jquery-console-focus');
            inner.addClass('jquery-console-nofocus');
        });

        ////////////////////////////////////////////////////////////////////////
        // Bind to the paste event of the input box so we know when we
        // get pasted data
        typer.bind('paste', function(e) {
            // wipe typer input clean just in case
            typer.val("");
            // this timeout is required because the onpaste event is
            // fired *before* the text is actually pasted
            setTimeout(function() {
                typer.consoleInsert(typer.val());
                typer.val("");
            }, 0);
        });

        ////////////////////////////////////////////////////////////////////////
        // Handle key hit before translation
        // For picking up control characters like up/left/down/right

        typer.keydown(function(e){
            cancelKeyPress = 0;
            var keyCode = e.keyCode;
	    // C-c: cancel the execution
	    if(e.ctrlKey &amp;&amp; keyCode == 67) {
		cancelKeyPress = keyCode;
		cancelExecution();
		return false;
	    }
	    if (acceptInput) {
		if (keyCode in keyCodes) {
                    cancelKeyPress = keyCode;
		    (keyCodes[keyCode])();
		    return false;
		} else if (e.ctrlKey &amp;&amp; keyCode in ctrlCodes) {
                    cancelKeyPress = keyCode;
		    (ctrlCodes[keyCode])();
		    return false;
		} else if (e.altKey  &amp;&amp; keyCode in altCodes) {
                    cancelKeyPress = keyCode;
		    (altCodes[keyCode])();
		    return false;
		}
	    }
        });

        ////////////////////////////////////////////////////////////////////////
        // Handle key press
        typer.keypress(function(e){
            var keyCode = e.keyCode || e.which;
            if (isIgnorableKey(e)) {
                return false;
            }
          // // C-v: don't insert on paste event
            if ((e.ctrlKey || e.metaKey) &amp;&amp; String.fromCharCode(keyCode).toLowerCase() == 'v') {
              return true;
            }
            if (acceptInput &amp;&amp; cancelKeyPress != keyCode &amp;&amp; keyCode &gt;= 32){
                if (cancelKeyPress) return false;
                if (typeof config.charInsertTrigger == 'undefined' ||
                    (typeof config.charInsertTrigger == 'function' &amp;&amp;
                     config.charInsertTrigger(keyCode,promptText)))
                    typer.consoleInsert(keyCode);
            }
            if ($.browser.webkit) return false;
        });

        function isIgnorableKey(e) {
            // for now just filter alt+tab that we receive on some platforms when
            // user switches windows (goes away from the browser)
            return ((e.keyCode == keyCodes.tab || e.keyCode == 192) &amp;&amp; e.altKey);
        };

        ////////////////////////////////////////////////////////////////////////
        // Rotate through the command history
        function rotateHistory(n){
            if (history.length == 0) return;
            ringn += n;
            if (ringn &lt; 0) ringn = history.length;
            else if (ringn &gt; history.length) ringn = 0;
            var prevText = promptText;
            if (ringn == 0) {
                promptText = restoreText;
            } else {
                promptText = history[ringn - 1];
            }
            if (config.historyPreserveColumn) {
                if (promptText.length &lt; column + 1) {
                    column = promptText.length;
                } else if (column == 0) {
                    column = promptText.length;
                }
            } else {
                column = promptText.length;
            }
            updatePromptDisplay();
        };

	function previousHistory() {
	    rotateHistory(-1);
	};

	function nextHistory() {
	    rotateHistory(1);
	};

        // Add something to the history ring
        function addToHistory(line){
            history.push(line);
            restoreText = '';
        };

        // Delete the character at the current position
        function deleteCharAtPos(){
            if (column &lt; promptText.length){
                promptText =
                    promptText.substring(0,column) +
                    promptText.substring(column+1);
                restoreText = promptText;
                return true;
            } else return false;
        };

	function backDelete() {
            if (moveColumn(-1)){
                deleteCharAtPos();
                updatePromptDisplay();
            }
	};

	function forwardDelete() {
            if (deleteCharAtPos())
                updatePromptDisplay();
	};

	function deleteUntilEnd() {
	    while(deleteCharAtPos()) {
		updatePromptDisplay();
	    }
	};

	function deleteNextWord() {
	    // A word is defined within this context as a series of alphanumeric
	    // characters.
	    // Delete up to the next alphanumeric character
	    while(column &lt; promptText.length &amp;&amp;
		  !isCharAlphanumeric(promptText[column])) {
		deleteCharAtPos();
		updatePromptDisplay();
	    }
	    // Then, delete until the next non-alphanumeric character
	    while(column &lt; promptText.length &amp;&amp;
		  isCharAlphanumeric(promptText[column])) {
		deleteCharAtPos();
		updatePromptDisplay();
	    }
	};

        ////////////////////////////////////////////////////////////////////////
        // Validate command and trigger it if valid, or show a validation error
        function commandTrigger() {
            var line = promptText;
            if (typeof config.commandValidate == 'function') {
                var ret = config.commandValidate(line);
                if (ret == true || ret == false) {
                    if (ret) {
                        handleCommand();
                    }
                } else {
                    commandResult(ret,"jquery-console-message-error");
                }
            } else {
                handleCommand();
            }
        };

        // Scroll to the bottom of the view
        function scrollToBottom() {
            if (jQuery.fn.jquery &gt; "1.6") {
                inner.prop({ scrollTop: inner.prop("scrollHeight") });
            }
            else {
                inner.attr({ scrollTop: inner.attr("scrollHeight") });
            }
        };

	function cancelExecution() {
	    if(typeof config.cancelHandle == 'function') {
		config.cancelHandle();
	    }
	}

        ////////////////////////////////////////////////////////////////////////
        // Handle a command
        function handleCommand() {
            if (typeof config.commandHandle == 'function') {
		disableInput();
                addToHistory(promptText);
                var text = promptText;
                if (extern.continuedPrompt) {
                  if (continuedText)
                    continuedText += '\n' + promptText;
                  else continuedText = promptText;
                } else continuedText = undefined;
                if (continuedText) text = continuedText;
                var ret = config.commandHandle(text,function(msgs){
                    commandResult(msgs);
                });
                if (extern.continuedPrompt &amp;&amp; !continuedText)
                  continuedText = promptText;
                if (typeof ret == 'boolean') {
                    if (ret) {
                        // Command succeeded without a result.
                        commandResult();
                    } else {
                        commandResult('Command failed.',
                                      "jquery-console-message-error");
                    }
                } else if (typeof ret == "string") {
                    commandResult(ret,"jquery-console-message-success");
                } else if (typeof ret == 'object' &amp;&amp; ret.length) {
                    commandResult(ret);
                } else if (extern.continuedPrompt) {
                    commandResult();
                }
            }
        };

        ////////////////////////////////////////////////////////////////////////
        // Disable input
	function disableInput() {
	    acceptInput = false;
	};

        // Enable input
	function enableInput() {
	    acceptInput = true;
	}

        ////////////////////////////////////////////////////////////////////////
        // Reset the prompt in invalid command
        function commandResult(msg,className) {
            column = -1;
            updatePromptDisplay();
            if (typeof msg == 'string') {
                message(msg,className);
            } else if ($.isArray(msg)) {
                for (var x in msg) {
                    var ret = msg[x];
                    message(ret.msg,ret.className);
                }
            } else { // Assume it's a DOM node or jQuery object.
              inner.append(msg);
            }
            newPromptBox();
        };

        ////////////////////////////////////////////////////////////////////////
        // Display a message
        function message(msg,className) {
            var mesg = $('&lt;div class="jquery-console-message"&gt;&lt;/div&gt;');
            if (className) mesg.addClass(className);
            mesg.filledText(msg).hide();
            inner.append(mesg);
            mesg.show();
        };

        ////////////////////////////////////////////////////////////////////////
        // Handle normal character insertion
        // data can either be a number, which will be interpreted as the
        // numeric value of a single character, or a string
        typer.consoleInsert = function(data){
            // TODO: remove redundant indirection
            var text = isNaN(data) ? data : String.fromCharCode(data);
            var before = promptText.substring(0,column);
            var after = promptText.substring(column);
            promptText = before + text + after;
            moveColumn(text.length);
            restoreText = promptText;
            updatePromptDisplay();
        };

        ////////////////////////////////////////////////////////////////////////
        // Move to another column relative to this one
        // Negative means go back, positive means go forward.
        function moveColumn(n){
            if (column + n &gt;= 0 &amp;&amp; column + n &lt;= promptText.length){
                column += n;
                return true;
            } else return false;
        };

	function moveForward() {
            if(moveColumn(1)) {
		updatePromptDisplay();
		return true;
	    }
	    return false;
	};

	function moveBackward() {
            if(moveColumn(-1)) {
		updatePromptDisplay();
		return true;
	    }
	    return false;
	};

	function moveToStart() {
            if (moveColumn(-column))
                updatePromptDisplay();
	};

	function moveToEnd() {
            if (moveColumn(promptText.length-column))
                updatePromptDisplay();
	};

	function moveToNextWord() {
	    while(column &lt; promptText.length &amp;&amp;
		  !isCharAlphanumeric(promptText[column]) &amp;&amp;
		  moveForward()) {
	    }
	    while(column &lt; promptText.length &amp;&amp;
		  isCharAlphanumeric(promptText[column]) &amp;&amp;
		  moveForward()) {
	    }
	};

	function moveToPreviousWord() {
	    // Move backward until we find the first alphanumeric
	    while(column -1 &gt;= 0 &amp;&amp;
		  !isCharAlphanumeric(promptText[column-1]) &amp;&amp;
		  moveBackward()) {
	    }
	    // Move until we find the first non-alphanumeric
	    while(column -1 &gt;= 0 &amp;&amp;
		  isCharAlphanumeric(promptText[column-1]) &amp;&amp;
		  moveBackward()) {
	    }
	};

	function isCharAlphanumeric(charToTest) {
	    if(typeof charToTest == 'string') {
		var code = charToTest.charCodeAt();
		return (code &gt;= 'A'.charCodeAt() &amp;&amp; code &lt;= 'Z'.charCodeAt()) ||
		    (code &gt;= 'a'.charCodeAt() &amp;&amp; code &lt;= 'z'.charCodeAt()) ||
		    (code &gt;= '0'.charCodeAt() &amp;&amp; code &lt;= '9'.charCodeAt());
	    }
	    return false;
	};

    function doComplete() {
        if(typeof config.completeHandle == 'function') {
            var completions = config.completeHandle(promptText);
            var len = completions.length;
            if (len === 1) {
                extern.promptText(promptText + completions[0]);
            } else if (len &gt; 1 &amp;&amp; config.cols) {
                var prompt = promptText;
                // Compute the number of rows that will fit in the width
                var max = 0;
                for (var i = 0;i &lt; len;i++) {
                    max = Math.max(max, completions[i].length);
                }
                max += 2;
                var n = Math.floor(config.cols / max);
                var buffer = "";
                var col = 0;
                for (i = 0;i &lt; len;i++) {
                    var completion = completions[i];
                    buffer += completions[i];
                    for (var j = completion.length;j &lt; max;j++) {
                        buffer += " ";
                    }
                    if (++col &gt;= n) {
                        buffer += "\n";
                        col = 0;
                    }
                }
                commandResult(buffer,"jquery-console-message-value");
                extern.promptText(prompt);
            }
        }
    };

	function doNothing() {};

        extern.promptText = function(text){
            if (text) {
                promptText = text;
                column = promptText.length;
                updatePromptDisplay();
            }
            return promptText;
        };

        ////////////////////////////////////////////////////////////////////////
        // Update the prompt display
        function updatePromptDisplay(){
            var line = promptText;
            var html = '';
            if (column &gt; 0 &amp;&amp; line == ''){
                // When we have an empty line just display a cursor.
                html = cursor;
            } else if (column == promptText.length){
                // We're at the end of the line, so we need to display
                // the text *and* cursor.
                html = htmlEncode(line) + cursor;
            } else {
                // Grab the current character, if there is one, and
                // make it the current cursor.
                var before = line.substring(0, column);
                var current = line.substring(column,column+1);
                if (current){
                    current =
                        '&lt;span class="jquery-console-cursor"&gt;' +
                        htmlEncode(current) +
                        '&lt;/span&gt;';
                }
                var after = line.substring(column+1);
                html = htmlEncode(before) + current + htmlEncode(after);
            }
            prompt.html(html);
            scrollToBottom();
        };

        // Simple HTML encoding
        // Simply replace '&lt;', '&gt;' and '&amp;'
        // TODO: Use jQuery's .html() trick, or grab a proper, fast
        // HTML encoder.
        function htmlEncode(text){
            return (
                text.replace(/&amp;/g,'&amp;amp;')
                    .replace(/&lt;/g,'&amp;lt;')
                    .replace(/&lt;/g,'&amp;lt;')
                    .replace(/ /g,'&amp;nbsp;')
                    .replace(/\n/g,'&lt;br /&gt;')
            );
        };

        return extern;
    };
    // Simple utility for printing messages
    $.fn.filledText = function(txt){
        $(this).text(txt);
        $(this).html($(this).html().replace(/\n/g,'&lt;br/&gt;'));
        return this;
    };
})(jQuery);
</code></property><property><name>jQuery console</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.CRaSH</name>
<number>1</number>
<className>XWiki.JavaScriptExtension</className>
<guid>dcdbbe9e-c2c4-4494-8a45-e8cfaf7990b0</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>; (function( $j , XWiki ) {

  XWiki.CRaSH = Class.create({

      crashDocument: new XWiki.Document("CRaSH", "XWiki")

    , header:
              "\n" +
              "\n" +
              "This CRaSH demo will show you a few CRaSH features:\n" +

              "\n" +
              "Database:\n" +
              "% jdbc open java:comp/env/jdbc/crash                       open a connection to the database\n" +
              "% jdbc info                                                display connection info\n" +
              "% jdbc execute select count(*) from dual where 1=1         execute some SQL\n" +
              "% jdbc close                                               close the current jdbc connection\n" +

              "\n" +
              "Threads:\n" +
              "% thread ls                                                show all threads\n" +
              "% thread dump X                                            dump thread X\n" +

              "\n" +
              "System:\n" +
              "% system propget java.version                              display a sytem property\n" +
              "% system freemem                                           display amount of free memory\n" +

              "\n" +
              "Type 'help' to show the available commands\n"

    , initialize: function() {
        this.getWelcome(function(data){
         var controller = $j("#console").console({
             promptLabel: data.prompt
           , autofocus: true
           , welcomeMessage : this.header + data.welcome
           , cols: 80
           , commandHandle: this.handleCommand.bind(this)
           , cancelHandle: this.cancelHandle.bind(this)
           , completeHandle: this.completeHandle.bind(this)
         });
      }.bind(this))
    }

    , cancelHandle: function() {
    }

    , completeHandle: function(prefix) {
    }

    , handleCommand: function(line, report) {
        var ajx = new Ajax.Request(this.crashDocument.getURL("get", "do=execute&amp;xpage=plain&amp;outputSyntax=plain"), {
          parameters: {
             line: line,
             width: 80
          },
          onComplete: function(transport) {
              var   data = transport.responseJSON
                  , container = new Element("div", {'class':'jquery-console-message'});
              
              for (var i = 0 ; i &lt; data.length ; i++) {
                  var chunk = new Element("span").update(data[i].text);
                  if (data[i].fg) {
                      chunk.setStyle("color", data[i].fg);
                  }
                  container.insert(chunk);
              }
              
              report(container);
          }
        
        });
    }

    , getWelcome: function(callback) {
      var ajx = new Ajax.Request(this.crashDocument.getURL("get", "do=welcome&amp;xpage=plain&amp;outputSyntax=plain"), {
        onComplete: function(transport) {
          var data = transport.responseJSON;
          callback &amp;&amp; callback.call(this, data);
        }.bind(this)
      });
    }

  });

  $j(document).ready(function(){
    new XWiki.CRaSH();
  });

})(jQuery, XWiki);</code>
</property>
<property>
<name>CRaSH console</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.CRaSH</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<guid>07ebda21-dc66-4ecd-bf4e-0a17410e8f1f</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>div.console{
  font-size:14px;
  margin-top:1em;
  background-color:#131517;
  -webkit-border-radius:6px;
  -moz-border-radius:6px;
  border-radius:6px;
  color: #999999;
  white-space:pre-wrap;
}
div.console div.jquery-console-inner{
  height:500px;
  padding:0.5em;
  overflow:auto;
}
div.console div.jquery-console-prompt-box{
  color:#ffffff;
  font-family:monospace;
}
div.console div.jquery-console-focus span.jquery-console-cursor{
  background:#ffffff;
  color:#060606;
  font-weight:bold;
}
div.console div.jquery-console-message-error{
  color:#999999;
  font-family:sans-serif;
  font-weight:bold;
  padding:0.1em;
}
div.console div.jquery-console-message{
  font-family:monospace;
  padding:0.1em;
}
div.console div.jquery-console-message-success{

}
div.console span.jquery-console-prompt-label{
  font-weight:bold;
}
</code></property><property><name></name></property><property><parse></parse></property><property><use>currentPage</use>
</property>
</object>
<content>{{groovy}}
if (request.do &amp;&amp; xwiki.hasAccessLevel("programming", doc.fullName)) {
  response.setContentType("application/json")
  println "{{{"
  switch (request.do) {
    case "execute":
      println new groovy.json.JsonBuilder(services.CRaSH.doExecute([:])).toString()
    break;
    
    case "complete":
    break;
    
    case "cancel":
    break;
    
    case "welcome":
        println new groovy.json.JsonBuilder(services.CRaSH.welcome()).toString()
    break;
  }
  println "}}}"
}
else if (request.do) {
    // Does not have prog rights
    println """
{{error}}
Sorry mate, programming rights are required to use the CRaSH console.
{{/error}}
"""
}
else {
    xwiki.jsx.use("XWiki.jQuery")
    xwiki.jsx.use("XWiki.CRaSH")
    println """
{{html}}
  &lt;div class="center"&gt;
    &lt;div id="console" class="console"&gt;
    &lt;/div&gt;
  &lt;/div&gt;
{{/html}}
"""
}
{{/groovy}}</content></xwikidoc>
